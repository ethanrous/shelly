#!/bin/zsh

### Alias ###
alias dps="sudo docker ps --format \"table {{.ID}} \t{{.Status}} \t{{.Names}}\""
alias sbp="source $SHELLY/zsh/zsh_main"
alias ebrc="cd $SHELLY && em ."
alias v='ls -l'
alias va='ls -la'
alias n='ping 1.1.1.1'
alias whoamip='curl -s ifconfig.me'
alias ip='ifconfig | grep 10.10.1'
alias pathls='echo $PATH | tr ":" "\n"'
alias sync="$SHELLY/zsh/setup.zsh"

### Style Points ###
export COLOR=white

autoload -Uz vcs_info
precmd() { vcs_info }

zstyle ':vcs_info:git:*' formats '%F{red}(%b)%f '

setopt PROMPT_SUBST
PROMPT='[%F{$COLOR}%t %m%f] %11F%~%f ${vcs_info_msg_0_}%f$ '

if [[ $SHELLY_DEBUG == "true" ]]; then
	echo "Set Prompt $PROMPT"
fi

### Funcs ###

function run_cmd() {
  if [[ $2 =~ ^([^@]+@)?([^:]+):(.*)$ ]]; then
    ssh $match[1]$match[2] $1 $match[3]
  else
    $(which $1) $2 $3
  fi
}

dock() {
	docker exec -it $1 bash
}

cat() {
    run_cmd /bin/cat ${@: -1}
}

ls() {
    # $1 is the options for lsd, use $2
    if which eza >/dev/null 2>&1; then
      run_cmd eza $1 ${@: -1}
    else
      run_cmd /usr/bin/ls $1 ${@: -1}
    fi
}

alias em="$EDITOR"

search() {
  DIR=""
  if [[ "$2" != "" ]]; then
	  DIR="$2"
  else
	  DIR=.
  fi
  find "$DIR" -name "*$1*" 2>&1 | grep -v "find: "
}

searchall() {
    find / -name "$1" 2>&1 | grep -v "find: "
}

known-host-rm() {
  cat ~/.ssh/known_hosts | grep -v $1 > ~/.ssh/known_hosts
}

printProcess() {
	printf "\n------ Processes Matching \"$1\" ------\n$(ps aux | grep "$1" | grep -v grep | awk '{print $2, $11}')\n\n"
}

killall() {
  if [[ "$1" == "" ]]
  then
    echo "Search string cannot be empty"
  else
    printProcess "$1"
    read -n 1 -p "End these processes: (y/n)? " answer
    printf "\n"
	fi
 	if [[ "$answer" == "y" ]]
  then
  #  pkill -f "$1"
	fi
}

getme() {
  if [[ "$1" == "" ]]
  then
    echo "No filename specified"
    return
  fi

  files=$(find . -type f -name "*$1*")
  files=("${(@s:\n:)files}")
  echo "Reading $files[1]"
  cat $files[1]
}

mcsay() {
  text="\"$@\""

  command="/Users/ethan/repos/mcrcon/mcrcon -H lucy.arcticnet -p minecraft1234 "
  command+=\'
  command+="tellraw @a "
  command+=$text
  command+=\'
  eval "$command"
  # ~/repos/mcrcon/mcrcon -H lucy.arcticnet -p minecraft1234 $(echo $command)
}

port() {
    echo "Finding processes listening on port $1..."
    lsof -n -i4TCP:$1 | grep LISTEN
}

kill-ollama() {
	pkill ollama-copilot
}

# Wrap nvm in setup function so initial shell load doesn't take forever
nvm() {
    unset -f nvm
    if [[ -z $NVM_DIR ]]; then
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
    fi
    nvm $@
}
unset NVM_DIR

add_to_path() {
    if [[ $2 == true ]]; then
        if [[ $SHELLY_DEBUG == true ]]; then
            echo "Overriding PATH entry $1 to be at top"
        fi
        export PATH=$(echo $PATH | sed -r -e "s|${1}:?||g")
    fi
    if [[ ":$PATH:" != *":$1:"* ]]; then
        if [[ $SHELLY_DEBUG == true ]]; then
            echo "Adding $1 to PATH"
        fi
        export PATH=$1:$PATH
    fi
}

if which ollama-copilot >/dev/null; then
    if ! pgrep ollama-copilot >/dev/null; then
        echo "Launching ollama-copilot"
		export OLLAMA_HOST="lucy.arcticnet:11439"
		mkdir -p ~/.config/logs
        ollama-copilot >~/.config/logs/ollama.log 2>&1 &

        # Detatch from new process
        disown
    fi
fi

# Danger??
ulimit -n 4096

